#!/usr/bin/env python3

"""Retrieve vulnerability age data from the Cyber Hygiene database.

Usage:
  vulnerability-age-data.py --creds=FILENAME [--days=INTEGER] [--group=GROUP] [--log-level=LEVEL] [--severity=INTEGER] [--start-date=DATE]
  vulnerability-age-data.py (-h | --help)
Options:
  -c --creds=FILENAME    A YAML file containing the Cyber Hygiene database
                         credentials.
  -d --days=INTEGER      An integer indicating the age in days that defines
                         young and old vulnerabilities.  [default: 30]
  -g --group=GROUP       The group for whose decendants data will be returned.
                         [default: EXECUTIVE]
  -h --help              Show this message.
  --log-level=LEVEL      If specified, then the log level will be set to
                         the specified value.  Valid values are "debug", "info",
                         "warning", "error", and "critical". [default: warning]
  -s --severity=INTEGER  An integer indicating the severity.  A value of 3
                         indicates high severity and a value of 4 indicates
                         critical severity.  [default: 4]
  -u --start-date=DATE   A UTC date in ISO format.  This defines the starting
                         date for the data returned.  [default: 2019-05-21]
"""

import datetime
import logging
import sys

import docopt
from mongo_db_from_config import db_from_config
import numpy
import pandas
import pymongo
import yaml

# A numerical value indicating a critical severity
CRITICAL_SEVERITY = 4
# A numerical value indicating a high severity
HIGH_SEVERITY = 3


def get_all_descendants(db, parent):
    """Return all (non-retired) descendants of the parent.

    Parameters
    ----------
    db : MongoDatabase
        The Mongo database from which request document data can be
        retrieved.

    parent : str
        The parent for which all descendants are desired.

    Returns
    -------
    list(str): The descendants of the parent.

    Throws
    ------
    ValueError: If there is no request document corresponding to the
    specified parent.

    """
    # Stolen from
    # https://github.com/cisagov/cyhy-mailer/blob/develop/cyhy/mailer/cli.py
    current_request = db.requests.find_one({"_id": parent})
    if not current_request:
        raise ValueError(parent + " has no request document")

    descendants = []
    if current_request.get("children"):
        for child in current_request["children"]:
            if not db.requests.find_one({"_id": child}).get("retired"):
                descendants.append(child)
                descendants += get_all_descendants(db, child)

    # Remove duplicates
    return list(set(descendants))


def get_cybex_dataframe(
    db, start_date_utc, ticket_severity, group, tickets_closed_past_days
):
    """Stolen from https://github.com/jsf9k/ncats-webd/blob/develop/ncats_webd/cybex_queries.py."""
    now = datetime.datetime.now(datetime.timezone.utc)
    tomorrow = now + datetime.timedelta(days=1)
    days_to_graph = pandas.to_datetime(pandas.date_range(start_date_utc, now), utc=True)

    fed_executive_owners = get_all_descendants(db, group)

    # Calculate Buckets
    tix = db.tickets.find(
        {
            "details.severity": ticket_severity,
            "false_positive": False,
            "owner": {"$in": fed_executive_owners},
            "$or": [{"time_closed": {"$gte": start_date_utc}}, {"time_closed": None}],
        },
        {"_id": False, "time_opened": True, "time_closed": True},
    )

    tix = list(tix)
    df = pandas.DataFrame(tix)
    results_df = pandas.DataFrame(
        index=days_to_graph, columns=["young", "old", "total"]
    )
    if not df.empty:
        # For accounting purposes, say all open tickets will close
        # tomorrow
        df.time_closed = df.time_closed.fillna(tomorrow)
        # Convert times to datetime64
        df.time_closed = pandas.to_datetime(df.time_closed, utc=True)
        df.time_opened = pandas.to_datetime(df.time_opened, utc=True)

        old_delta = numpy.timedelta64(tickets_closed_past_days, "D")

        for start_of_day, values in results_df.iterrows():
            end_of_day = (
                start_of_day + numpy.timedelta64(1, "D") - numpy.timedelta64(1, "ns")
            )
            open_on_day_mask = (df.time_opened <= end_of_day) & (
                df.time_closed > start_of_day
            )
            age_on_date = start_of_day - df.time_opened
            age_on_date_masked = age_on_date.mask(open_on_day_mask.eq(False))
            values["total"] = open_on_day_mask.value_counts().get(True, 0)
            values["young"] = (
                (age_on_date_masked < old_delta).value_counts().get(True, 0)
            )
            values["old"] = (
                (age_on_date_masked >= old_delta).value_counts().get(True, 0)
            )

    return results_df


def csv_get_cybex_data(
    db, start_date_utc, ticket_severity, group, tickets_closed_past_days
):
    """Stolen from https://github.com/jsf9k/ncats-webd/blob/develop/ncats_webd/cybex_queries.py."""
    results_df = get_cybex_dataframe(
        db, start_date_utc, ticket_severity, group, tickets_closed_past_days
    )
    results_df.index.name = "date"
    results_df.columns = [
        f"< {tickets_closed_past_days} days",
        f"> {tickets_closed_past_days} days",
        "total",
    ]
    return results_df.to_csv()


def main():
    """Perform the query and print the results."""
    args = docopt.docopt(__doc__, version="0.0.1")

    # Set up logging
    log_level = args["--log-level"]
    try:
        logging.basicConfig(
            format="%(asctime)-15s %(levelname)s %(message)s", level=log_level.upper()
        )
    except ValueError:
        logging.critical(
            f'"{log_level}" is not a valid logging level.  Possible values '
            "are debug, info, warning, and error."
        )
        return 1

    # Handle command line arguments
    db_creds_file = args["--creds"]
    days = int(args["--days"])
    group = args["--group"]
    severity = int(args["--severity"])
    start_date = datetime.datetime.fromisoformat(args["--start-date"]).replace(
        tzinfo=datetime.timezone.utc
    )

    # Connect to database
    try:
        db = db_from_config(db_creds_file)
    except OSError:
        logging.critical(
            f"Database configuration file {db_creds_file} does not exist", exc_info=True
        )
        return 1
    except yaml.YAMLError:
        logging.critical(
            f"Database configuration file {db_creds_file} does not contain valid YAML",
            exc_info=True,
        )
        return 1
    except KeyError:
        logging.critical(
            f"Database configuration file {db_creds_file} does not contain the expected keys",
            exc_info=True,
        )
        return 1
    except pymongo.errors.ConnectionError:
        logging.critical(
            f"Unable to connect to the database server in {db_creds_file}",
            exc_info=True,
        )
        return 1
    except pymongo.errors.InvalidName:
        logging.critical(
            f"The database in {db_creds_file} does not exist", exc_info=True
        )
        return 1

    # Perform the query
    data = csv_get_cybex_data(db, start_date, severity, group, days)

    # Stop logging and clean up
    logging.shutdown()
    print(data)


if __name__ == "__main__":
    sys.exit(main())
